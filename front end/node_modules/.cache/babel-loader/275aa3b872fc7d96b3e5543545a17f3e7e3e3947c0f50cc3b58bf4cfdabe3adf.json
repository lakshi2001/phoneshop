{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wwwka\\\\OneDrive\\\\Desktop\\\\the_phone_shop\\\\frontend\\\\src\\\\components\\\\customer\\\\chatbot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport WebSocket from 'ws';\nimport Navbar from './nav';\nimport './ChatApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  function web_socket() {\n    const wss = new WebSocket.Server({\n      port: 8080\n    });\n  }\n  useEffect(() => {\n    //web_socket();\n    console.log(1);\n  }, []);\n  // const wss = new WebSocket.Server({ port: 8080 });\n\n  // wss.on('connection', (ws) => {\n  // console.log('Client connected');\n\n  // ws.on('message', (message) => {\n  //     console.log(`Received message: ${message}`);\n  //     ws.send('Received your message');\n  // });\n\n  // ws.on('close', () => {\n  //     console.log('Client disconnected');\n  // });\n  // });\n\n  const handleMessageSubmit = () => {\n    if (newMessage.trim() !== '') {\n      setMessages([...messages, {\n        text: newMessage,\n        sender: 'user'\n      }]);\n      setNewMessage('');\n\n      // Here, you would typically send the message to the server or chatbot\n      // and handle the response to update the messages state accordingly\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#E2E7E9',\n        paddingBottom: '6%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-4 pt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-decoration-underline\",\n          children: \"Chat Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender}`,\n            children: message.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type a message...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleMessageSubmit,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatApp, \"ppYy//Iy9fHF0/R/fKleZlFUFyc=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","WebSocket","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatApp","_s","messages","setMessages","newMessage","setNewMessage","web_socket","wss","Server","port","console","log","handleMessageSubmit","trim","text","sender","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","paddingBottom","className","map","message","index","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/wwwka/OneDrive/Desktop/the_phone_shop/frontend/src/components/customer/chatbot.tsx"],"sourcesContent":["import React, { useState , useEffect } from 'react';\r\nimport {\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardTitle,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBCardFooter\r\n} from 'mdb-react-ui-kit';\r\n\r\nimport axios from 'axios';\r\nimport WebSocket from 'ws';\r\n\r\n\r\nimport Navbar from './nav';\r\nimport './ChatApp.css'; \r\n\r\ninterface Message {\r\n  text: string;\r\n  sender: string;\r\n}\r\n\r\nconst ChatApp: React.FC = () => {\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n\r\n\r\n    function web_socket(){\r\n        const wss = new WebSocket.Server({ port: 8080 });\r\n    }\r\n\r\n    useEffect(() => {\r\n        //web_socket();\r\n        console.log(1);\r\n    },[]);\r\n    // const wss = new WebSocket.Server({ port: 8080 });\r\n\r\n    // wss.on('connection', (ws) => {\r\n    // console.log('Client connected');\r\n\r\n    // ws.on('message', (message) => {\r\n    //     console.log(`Received message: ${message}`);\r\n    //     ws.send('Received your message');\r\n    // });\r\n\r\n    // ws.on('close', () => {\r\n    //     console.log('Client disconnected');\r\n    // });\r\n    // });\r\n\r\n  const handleMessageSubmit = () => {\r\n    if (newMessage.trim() !== '') {\r\n      setMessages([...messages, { text: newMessage, sender: 'user' }]);\r\n      setNewMessage('');\r\n\r\n      // Here, you would typically send the message to the server or chatbot\r\n      // and handle the response to update the messages state accordingly\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Navbar/>\r\n    <div style={{backgroundColor : '#E2E7E9' , paddingBottom:'6%'}}>\r\n        <div className='text-center mb-4 pt-5'>\r\n            <h1 className='text-decoration-underline'>Chat Now</h1>\r\n        </div>\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-messages\">\r\n                {messages.map((message, index) => (\r\n                <div key={index} className={`message ${message.sender}`}>\r\n                    {message.text}\r\n                </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat-input\">\r\n                <input\r\n                type=\"text\"\r\n                placeholder=\"Type a message...\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n                />\r\n                <button onClick={handleMessageSubmit}>Send</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}